{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "DataTable.svelte",
    "Info.svelte",
    "TodoItem.svelte",
    "Todos.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Info from './Info.svelte'\n\timport Todos from './Todos.svelte'\n\timport ReadFile from './ReadFile.svelte'\n\timport DataTable from './DataTable.svelte'\n\texport let name\n\tlet data = ''\n\tlet typeOfData = ''\n</script>\n\n<main>\n\t<h1>Hello {name}!</h1>\n\t<ReadFile bind:data=\"{data}\" bind:typeOfData=\"{typeOfData}\"></ReadFile>\n\t{#if data && data !== ''}\n\t\t<DataTable bind:data=\"{data}\" typeOfData=\"{typeOfData}\"></DataTable>\n\t{/if}\n\t<Todos></Todos>\n\t<Info></Info>\n</main>\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t\tbackground-color: #333333;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\r\n    import { downloadBlobAsFile, getValueFromIndex } from './Helper'\r\n    import { onMount, afterUpdate, beforeUpdate } from \"svelte\"\r\n    // import convert from 'xml-js'\r\n    export let data\r\n    export let typeOfData\r\n    let txtData = ''\r\n    let xmlData = ''\r\n    let computers = []\r\n\r\n    onMount(() => {\r\n        console.log(typeOfData)\r\n        createComputersObject()\r\n    })\r\n    function saveFile (mode) {\r\n        const blob = new Blob([mode === 'txt' ? txtData : xmlData], { type: `text/${mode};charset=utf-8` })\r\n        downloadBlobAsFile(blob, `data.${mode}`)\r\n    }\r\n    function inputChanged (e) {\r\n        computers[e.path[2].attributes[1].value].flat[e.target.attributes[0].value] = e.target.value\r\n        setTxtDataFromComputers()\r\n    }\r\n    function setTxtDataFromComputers () {\r\n        if (computers.length === 0)  return ''\r\n        let localData = ''\r\n        computers.forEach((computer, computersIndex) => {\r\n            Object.entries(computer.flat).forEach((entry, index) => {\r\n                    localData += `${entry[1]};`\r\n                if (computersIndex !== computers.length - 1 && index === 14) {\r\n                    localData += `\\n`\r\n                }\r\n            })\r\n        })\r\n        data = txtData = localData\r\n        createComputersObject()\r\n    }\r\n    function createComputersObject () {\r\n        typeOfData === 'txt'\r\n            ? createComputersFromTxt()\r\n            : createComputersFromXml()\r\n    }\r\n    function createComputersFromTxt () {\r\n        computers = []\r\n        data.split('\\n').forEach(computer => {\r\n            let object = { matryca: {}, procesor: {}, dysk: {}, \"karta graficzna\": {}, flat: {} }\r\n            computer.split(';').forEach((parameter, index) => {\r\n                index < 15 ? object.flat[getValueFromIndex(index)] = parameter : ''\r\n                if (index === 0) {\r\n                    object[getValueFromIndex(index)] = parameter\r\n                } else if (index > 0 && index < 5) {//matryca\r\n                    object.matryca[getValueFromIndex(index)] = parameter\r\n                } else if (index > 4 && index < 8) {//procesor\r\n                    object.procesor[getValueFromIndex(index)] = parameter\r\n                } else if (index === 8) {//RAM\r\n                    object[getValueFromIndex(index)] = parameter\r\n                } else if (index > 8 && index < 11) {//dysk\r\n                    object.dysk[getValueFromIndex(index)] = parameter\r\n                } else if (index > 10 && index < 13) {// karta\r\n                    object[\"karta graficzna\"][getValueFromIndex(index)] = parameter\r\n                } else if (index === 13) {\r\n                    object[getValueFromIndex(index)] = parameter\r\n                } else if (index === 14) {\r\n                    object[getValueFromIndex(index)] = parameter\r\n                }\r\n            })\r\n            computers = [...computers, object]\r\n        })\r\n    }\r\n    function createComputersFromXml () {\r\n        computers = []\r\n        // const cos = convert.xml2json(xmlData, {compact: true, spaces: 4})\r\n        // console.log(cos)\r\n    }\r\n</script>\r\n<div>\r\n    Zapisz dane do txt:\r\n    <button type=\"button\" id=\"to-txt-save\" on:click={() => saveFile(\"txt\")}>Zapisz do pliku txt</button>\r\n    Zapisz dane do xml:\r\n    <button type=\"button\" id=\"to-xml-save\" on:click={() => saveFile(\"xml\")}>Zapisz do pliku xml</button>\r\n    <div id=\"table-wrapper\">\r\n        <div id=\"table-scroll\">\r\n            <table>\r\n                <tr class=\"flex\">\r\n                    <th class=\"table-head\">Producent</th>\r\n                    <th class=\"table-head\">wielkość matrycy</th>\r\n                    <th class=\"table-head\">rozdzielczość</th>\r\n                    <th class=\"table-head\">typ matrycy</th>\r\n                    <th class=\"table-head\">czy dotykowy ekran</th>\r\n                    <th class=\"table-head\">procesor</th>\r\n                    <th class=\"table-head\">liczba fizycznych rdzeni</th>\r\n                    <th class=\"table-head\">taktowanie</th>\r\n                    <th class=\"table-head\">RAM</th>\r\n                    <th class=\"table-head\">pojemność dysku</th>\r\n                    <th class=\"table-head\">typ dysku</th>\r\n                    <th class=\"table-head\">karta graficzna</th>\r\n                    <th class=\"table-head\">pamięć karty graficznej</th>\r\n                    <th class=\"table-head\">system operacyjny</th>\r\n                    <th class=\"table-head\">napęd optyczny</th>\r\n                </tr>\r\n                {#each computers as { flat }, i}\r\n                <tr class=\"flex\" computer=\"{i}\">\r\n                    {#each Object.entries(flat) as [key, value], i}\r\n                        <th class=\"flex\"><input value=\"{value}\" key=\"{key}\" flat=\"{i}\" on:change=\"{(e) => inputChanged(e)}\" class=\"cell\"></th>\r\n                    {/each}\r\n                </tr>\r\n                {/each}\r\n            </table>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .flex {\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n    .cell {\r\n        border: none;\r\n        width: 200px;\r\n    }\r\n    .table-head {\r\n        font-weight: 600;\r\n        width: 200px;\r\n    }\r\n    #table-wrapper {\r\n        position:relative;\r\n    }\r\n    #table-scroll {\r\n        height:600px;\r\n        overflow:auto;\r\n        margin-top:20px;\r\n    }\r\n    #table-wrapper table {\r\n        width:100%;\r\n    }\r\n</style>",
    "<div>\n    <p>\n        Svelte provides a different approach to building web apps than some of the other frameworks covered in this module. While frameworks like React and Vue do the bulk of their work in the user's browser while the app is running, Svelte shifts that work into a compile step that happens only when you build your app, producing highly-optimized vanilla JavaScript.\n    </p>\n    <p>\n        The outcome of this approach is not only smaller application bundles and better performance, but also a developer experience that is more approachable for people that have limited experience of the modern tooling ecosystem.\n    </p>\n    <p>\n        Svelte sticks closely to the classic web development model of HTML, CSS, and JS, just adding a few extensions to HTML and JavaScript. It arguably has fewer concepts and tools to learn than some of the other framework options.\n    </p>\n    <p>\n        W skrócie:\n    </p>\n        <ul>\n            <li>Svelte jest kompilatorem, który kompiluje kod do czystego html, css i prawie czystego JS</li>\n            <li>Svelte nie operuje na virtual DOM (który jest dodatkiem do real DOM) tylko na samym real DOM, co znacznie zwiększa prędkość i reaktywność</li>\n            <li>Dzięki temu, że Svelte jest tak zbliżony do Vaniliowego JS'a, to jego programy zajmują mało miejsca, więc sa bardzo szybkie, strony są mało obciążone i zmiana parametru na stronie nie wymaga takiego nakładu pracy jak w innych frameworkach</li>\n            <li>W Svelte można pisać małe jak i duże aplikacje</li>\n            <li>Svelte jest idealny do Single Page Applications</li>\n            <li>Każdy plik reprezentuje jeden komponent w Svelte Js + HTMl + CSS. Style z komponentów nie wpływają na siebie</li>\n            <li>Oczywiście że powyższy przykład aplikacji TODO działa jak każdy inny, ale on działa bez renderowania, tzn nigdzie w godzie nie mówię aplikacji \"ej, coś się zmieniło, przerenderuj się\" tylko zmieniam tą wartość i Svelte samo wie które części strony należy zmienić - bez porównywania z poprzednim stanem strony.</li>\n        </ul>\n</div>\n\n<style>\n    li {\n        text-align: left;\n    }\n</style>",
    "<script>\n    import { createEventDispatcher } from 'svelte'\n    import { fly } from 'svelte/transition'\n    export let id\n    export let title\n    export let completed\n    const dispatch = createEventDispatcher()\n    function deleteTodo() {\n        dispatch('deleteTodo', { id })\n    }\n    function toggleComplete() {\n        dispatch('toggleComplete', { id })\n    }\n</script>\n\n<div class=\"todo-item\">\n    <div class=\"todo-item-left\" transition:fly=\"{{ y: 20, duration: 300 }}\">\n        <input type=\"checkbox\" bind:checked={completed} on:change={toggleComplete}>\n        <div class=\"todo-item-label\" class:completed={completed}>{title}</div>\n    </div>\n    <div class=\"remove-item\" on:click={deleteTodo}>\n        ×\n    </div>\n</div>\n<style>\n    .todo-item {\n        margin-bottom: 15px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        animation-duration: 0.3s;\n    }\n    .remove-item {\n        cursor: pointer;\n        margin-left: 15px;\n    }\n    .remove-item:hover {\n        color: lightseagreen;\n    }\n    .todo-item-left {\n        display: flex;\n        align-items: center;\n    }\n    .todo-item-label {\n        border: 1px solid white;\n        margin-left: 12px;\n    }\n    .completed {\n        text-decoration: line-through;\n        color: grey;\n    }\n</style>",
    "<script>\n    import TodoItem from './TodoItem.svelte'\n    let newTodoTitle = ''\n    let currentFilter = 'all'\n    let todos = [{\n            id: 1,\n            title: 'My first todo',\n            completed: false\n        }, {\n            id: 2,\n            title: 'My second todo',\n            completed: false\n        }, {\n            id: 3,\n            title: 'My third todo',\n            completed: false\n        }\n    ]\n    let nextId = todos.length + 1\n    $: todosRemaining = filteredTodos.filter(todo => !todo.completed).length\n    $: filteredTodos = currentFilter === 'all' ? todos : currentFilter === 'completed'\n            ? todos.filter(todo => todo.completed)\n            : todos.filter(todo => !todo.completed)\n    function addTodo(event) {\n        if (event.key === 'Enter') {\n          todos = [...todos, {\n              id: nextId,\n              completed: false,\n              title: newTodoTitle\n          }]\n            nextId++\n            newTodoTitle = ''\n        }\n    }\n    function checkAllTodos(event) {\n        todos.forEach(todo => todo.completed = event.target.checked)\n        todos = todos\n    }\n    function updateFilter(newFilter) {\n        currentFilter = newFilter\n    }\n    function clearCompleted() {\n        todos = todos.filter(todo => !todo.completed)\n    }\n    function handleDeleteTodo(event) {\n        todos = todos.filter(todo => todo.id !== event.detail.id)\n    }\n    function handleToggleComplete(event) {\n        const todoIndex = todos.findIndex(todo => todo.id === event.detail.id)\n        const updatedTodo = { ...todos[todoIndex], completed: !todos[todoIndex].completed}\n        todos = [\n            ...todos.slice(0, todoIndex),\n            updatedTodo,\n            ...todos.slice(todoIndex + 1),\n        ]\n    }\n</script>\n\n<div class=\"container\">\n    <h2>Svelte Todo App</h2>\n    <input type=\"text\" class=\"todo-input\" placeholder=\"Insert todo item ...\" bind:value={newTodoTitle} on:keydown={addTodo}>\n    {#each filteredTodos as todo}\n        <div class=\"todo-item\">\n            <TodoItem {...todo} on:deleteTodo={handleDeleteTodo} on:toggleComplete={handleToggleComplete} />\n        </div>\n    {/each}\n    <div class=\"inner-container\">\n        <div><label><input class=\"inner-container-input\" type=\"checkbox\" on:change=\"{checkAllTodos}\">Check All</label></div>\n        <div>{todosRemaining} items left</div>\n    </div>\n    <div class=\"inner-container\">\n        <div>\n            <button on:click=\"{() => updateFilter('all')}\" class:active=\"{currentFilter === 'all'}\">All</button>\n            <button on:click=\"{() => updateFilter('active')}\" class:active=\"{currentFilter === 'active'}\">Active</button>\n            <button on:click=\"{() => updateFilter('completed')}\" class:active=\"{currentFilter === 'completed'}\">Completed</button>\n        </div>\n        <div>\n            <button on:click=\"{clearCompleted}\">Clear Completed</button>\n        </div>\n    </div>\n</div>\n<style>\n    .container {\n        max-width: 800px;\n        margin: 10px auto;\n    }\n    .logo {\n        display: block;\n        margin: 20px auto;\n        width: 50%;\n    }\n    .todo-input {\n        width: 100%;\n        padding: 10px 20px;\n        font-size: 18px;\n        margin-bottom: 20px;\n    }\n    .inner-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        font-size: 16px;\n        border-top: 1px solid lightgrey;\n        padding-top: 15px;\n        margin-bottom: 13px;\n    }\n    .inner-container-input {\n        margin-right: 12px;\n    }\n    button {\n        font-size: 14px;\n        background-color: white;\n        appearance: none;\n    }\n    button:hover {\n        background: lightseagreen;\n    }\n    button:focus {\n        outline: none;\n    }\n    .active {\n        background: lightseagreen;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}